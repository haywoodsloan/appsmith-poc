{
  "unpublishedCollection": {
    "name": "Customers",
    "pageId": "Product Key Mock",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tisFinding: () => appsmith.store.isFinding,\n\t\n\tselectedCustomer: () => appsmith.store.selectedCustomer,\n\tcustomerDisplayName: () => `${Customers.selectedCustomer()?.name} (${Customers.selectedCustomer()?.id})`,\n\t\n\tmutableConfig: () => appsmith.store.mutableConfigs?.find(config =>\n\t\t\t config.databaseName === DatabaseSelect.selectedOptionValue\n\t),\n\toriginalConfig: () => Customers.selectedCustomer()?.configs?.find(config =>\n\t\t\t config.databaseName === DatabaseSelect.selectedOptionValue\n\t),\n\t\n\tinitLicenseCount: () => appsmith.store.initLicenseCount,\n\tinitDatabaseOption: () => Customers.selectedCustomer()?.configs[0]?.databaseName ?? '',\n\tdatabaseOptions: () => Customers.selectedCustomer()?.configs?.map(config => ({\n\t\tlabel: config.databaseName, \n\t\tvalue: config.databaseName\n\t})),\n\t\n\tassignedFeatures: () => Customers.mutableConfig().features.sort(),\n\tavailableFeatures: () => Feature_Info.data\n\t    .filter(fet => !Customers.assignedFeatures().includes(fet.value))\n\t    .map(fet => fet.value)\n\t\t\t.sort(),\n\t\n\tcanApply: () => {\n\t\tconst mutable = Customers.mutableConfig();\n\t\tconst original = Customers.originalConfig();\n\t\t\n\t\tif (!original || !Customers.validateConfigs(mutable)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn !Customers.compareConfigs(mutable, original);\n\t},\n\t\n\tcanApplyAll: () => {\n\t\tconst mutable = Customers.mutableConfig();\n\t\tconst originals = Customers.selectedCustomer()?.configs;\n\t\t\n\t\tif (!originals || !Customers.validateConfigs(mutable)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn originals.some(config => !Customers.compareConfigs(mutable, config));\n\t},\n\t\n\tinitState: () => {\n\t\tstoreValue('isFinding', false, false);\n\t\tstoreValue('selectedCustomer', undefined, false);\n\t\tstoreValue('mutableConfigs', undefined, false);\n\t\tstoreValue('initLicenseCount', 0, false);\n\t},\n\t\n\tgetFeatureLabel: (featureValue) => {\n\t\tconst feature = Feature_Info.data.find(fet => fet.value === featureValue);\n\t\tconst description = feature?.description ?? 'Unknown Feature'\n\t\treturn `(${featureValue}) ${description}`;\n\t},\n\t\n\tfindCustomer: async () => {\n\t\tconst customerId = CustomerIdInput.text;\n\t\tif (!customerId || Customers.isFinding()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tawait storeValue('isFinding', true, false);\n\t\t\tawait storeValue('selectedCustomer', undefined, false);\n\t\t\tawait storeValue('mutableConfigs', undefined, false);\n\t\t\tawait storeValue('initLicenseCount', 0, false);\n\t\t\t\n\t\t\tconst response = await Customer_Info.run({customerId});\n\t\t\tawait storeValue('initLicenseCount', response.configs[0]?.licenseCount, false);\n\t\t\tawait storeValue('mutableConfigs', response.configs, false);\n\t\t\tawait storeValue('selectedCustomer', response, false);\n\t\t} finally {\n\t\t\tawait storeValue('isFinding', false, false);\n\t\t}\n\t},\n\t\n\tsetLicenseCount: async () => {\n\t\tconst mutable = Customers.mutableConfig();\n\t\tmutable.licenseCount = parseInt(LicenseCountInput.text);\n\t\tawait Customers.updateConfig(mutable);\n\t},\n\t\n\tsetDatabase: async () => {\n\t\tawait storeValue('initLicenseCount', Customers.mutableConfig()?.licenseCount, false);\n\t},\n\t\n\tisFeatureChanged: (featureValue) => {\n\t\tconst inMutable = Customers.mutableConfig()?.features?.includes(featureValue);\n\t\tconst inOriginal = Customers.originalConfig()?.features?.includes(featureValue);\n\t\treturn inMutable !== inOriginal\n\t},\n\t\n\taddFeature: async (featureValue) => {\n\t\tconst mutable = Customers.mutableConfig();\n\t\tmutable.features.push(featureValue);\n\t\tconsole.log(featureValue, mutable);\n\t\tawait Customers.updateConfig(mutable);\n\t},\n\t\n\tremoveFeature: async (featureValue) => {\n\t\tconst mutable = Customers.mutableConfig();\n\t\tmutable.features = mutable.features.filter(fet => fet !== featureValue);\n\t\tconsole.log(featureValue, mutable);\n\t\tawait Customers.updateConfig(mutable);\n\t},\n\t\n\tupdateConfig: async (mutable) => {\n\t\tconst configs = appsmith.store.mutableConfigs;\n\t\tconst idx = configs.findIndex(config => \n\t\t    config.databaseName === mutable.databaseName\n\t\t);\n\t\t\n\t\tif (idx >= 0) {\n\t\t\tconfigs[idx] = mutable;\n\t\t\tawait storeValue('mutableConfigs', configs, false);\n\t\t}\n\t},\n\t\n\tcompareConfigs: (configA, configB) => {\n\t\treturn configA.licenseCount === configB.licenseCount;\n\t},\n\t\n\tvalidateConfigs: (...configs) => {\n\t\treturn configs.every(config => !!config && \n\t\t\t\t!isNaN(config.licenseCount)\n\t\t);\n\t}\n}",
    "variables": []
  },
  "id": "Product Key Mock_Customers",
  "deleted": false,
  "gitSyncId": "62c5b2370fe6a229f29411bd_62ceff2b2f6d3c2d44eca49b"
}